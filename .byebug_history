c
object_id
object
data
c
hash = serializer_class_name.constantize.new(data).serializable_hash
puts JSON.pretty_generate(data)
JSON.pretty_generate(data)
data = object["data"]
object["data"]
object[:data]
object
c
hash = serializer_class_name.constantize.new(object).serializable_hash
self.serializer_class_name = "::Synchronizers::ProductSerializer"
serializer_class_name.constantize
Serializers::Synchronizers::ProductSerializer
c
::Synchronizers::ProductSerializer
Serializers::Synchronizers::ProductSerializer
Serializers::Synchronizers::ProductSerializer.new
Serializers::Synchronizers::ProductSerializer
self
serializer_class_name.constantize
self.serializer_class_name = "Serializers::Synchronizers::ProductSerializer"
serializer_class_name.constantize
self.serializer_class_name = "::ProductSerializer"
self.serializer_class_name = "Serializers::Synchronizers::ProductSerializer"
serializer_class_name.constantize
serializer_class_name
c
self
object
c
puts JSON.pretty_generate(@args)
JSON.pretty_generate(@args)
JSON.pretty_generate(args)
@args
data
Synchronizers::Kiotviet.api_request(:post, @args.last, headers: headers_config, body: data)
@args.last
@args
args
data
c
path
data
c
data
self
c
path
data
c
path
data
dâtât
c
Synchronizers::Kiotviet.api_request(:post, path, headers: headers_config, body: data)
c
Synchronizers::Kiotviet.api_request(:post, path, headers: headers_config, body: data)
c
data
c
Synchronizers::BaseSynchronizer.call(data)
data = get_data_kiotviet
puts JSON.pretty_generate(response_hash)
JSON.pretty_generate(response_hash)
response_hash = response.body.present? ? JSON.parse(response.body.to_s) : { status: response.code }
JSON.pretty_generate(response)
jSON.pretty_generate(response)
response = HTTParty.get(path, headers: headers_config)
def headers_config
      {
        "Retailer": "Fascom",
        "Authorization": "Bearer" + " " + "#{ENV['ACCESS_TOKEN']}",
        'Accept-Encoding' => ''
      }
    end
response = HTTParty.get(path, headers: headers_config)
c
response = HTTParty.get(path, headers: headers_config)
c
response = HTTParty.get(path, headers: headers_config)
def headers_config
      {
        "Retailer": "Fascom",
        "Authorization": "Bearer" + " " + "#{ENV['ACCESS_TOKEN']}",
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Accept-Encoding': "gzip, deflate, br"
      }
    end
response = HTTParty.get(path, headers: headers_config)
def headers_config
      {
        "Retailer": "Fascom",
        "Authorization": "Bearer" + " " + "#{ENV['ACCESS_TOKEN']}",
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    end
response = HTTParty.get(path, headers: headers_config)
@decoded = Base64.decode64("#{ENV['ACCESS_TOKEN']}")
@inflated = Zlib::Inflate.inflate(@decoded)
@decoded = Base64.decode64("#{ENV['ACCESS_TOKEN']}")
@decoded = Base64.decode64(#{ENV['ACCESS_TOKEN']})
response = HTTParty.get(path, headers: headers_config)
HTTParty.get(path, headers: headers_config)
headers_config
