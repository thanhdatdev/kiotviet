c
bodcbody["ma_dvt"].nil?
body["ma_dvt"].nil?
body["ma_dvt"]
body['ma_dvt'] == dvt if body["ma_dvt"].nil?
body['ma_dvt'] == dvt if body["ma_dvt"].blank?
body['ma_dvt'] == ""
body['ma_dvt']
body
c
productArr
c
productArr
c
puts JSON.pretty_generate(productArr)
JSON.pretty_generate(productArr)
productArr
c
productsFascom
send_data_users_products(usersFascom, productsFascom, user_path, product_path)
productsFascom = products_result_query(dataImport, ENV['ID_APP_FASCOM'])
productsFascom
product_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
productsZenFascom
usersFascom
user_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_USERS']}"
c
productArr
c
productArr << {
                'ma_vt' => ma_vt,
                'ten_vt' => invoice['productName'],
                'gia_ban_le' => invoice['price'],
                'ma_dvt' =>  "C치i",
                'ma_lvt' => "TP",
                'tg_tk' =>  true,
                'tk_vt' => "1561",
                'tk_dt' => "51112",
                'tk_gv' => "6321"
              }
productArr
c
productArr.first['gia_ban_le'] != 0
productArr.first['gia_ban_le'] != 0.0
productArr.first != 0.0
productArr.first != 0.to_f
productArr.first != 0
productArr.first
productArr.uniq.last['gia_ban_le'] != 0
productArr.uniq.last
productArr.first
productArr.last
productArr.uniq
productArr
c
productArr
c
productArr
c
productArr
c
productArr << {
              'ma_vt' => ma_vt,
              'ten_vt' => invoice['productName'],
              'gia_ban_le' => invoice['price'],
              'ma_dvt' => 'C치i',
              'ma_lvt' => "TP",
              'tg_tk' =>  true,
              'tk_vt' => "1561",
              'tk_dt' => "51112",
              'tk_gv' => "6321"
            }
productArr
c
unless ma_vt.ascii_only?
            product = {
              'ma_vt' => ma_vt,
              'ten_vt' => invoice['productName'],
              'gia_ban_le' => invoice['price'],
              'ma_dvt' => 'C치i',
              'ma_lvt' => "TP",
              'tg_tk' =>  true,
              'tk_vt' => "1561",
              'tk_dt' => "51112",
              'tk_gv' => "6321"
            }
            productArr << product
          else
            product_hash = query_details_flexzen("#{branchPath}/#{ENV['FLEXZEN_API_PRODUCTS']}", 'ma_vt', ma_vt)
          end
product = {
              'ma_vt' => ma_vt,
              'ten_vt' => invoice['productName'],
              'gia_ban_le' => invoice['price'],
              'ma_dvt' => 'C치i',
              'ma_lvt' => "TP",
              'tg_tk' =>  true,
              'tk_vt' => "1561",
              'tk_dt' => "51112",
              'tk_gv' => "6321"
            }
c
if product_hash == []
            pro_hash = query_details_kiotviet("Products", ma_vt)
            begin
              pro_hash = query_details_kiotviet("Products", ma_vt)
            rescue URI::InvalidURIError
              puts URI.parse(URI.escape(query_details_kiotviet("Products", ma_vt)))
            end
            productArr << pro_hash
          end
pro_hash = query_details_kiotviet("Products", ma_vt)
product_hash = query_details_flexzen("#{branchPath}/#{ENV['FLEXZEN_API_PRODUCTS']}", 'ma_vt', ma_vt)
ma_vt = invoice['productCode'].to_s
product_hash = query_details_flexzen("#{branchPath}/#{ENV['FLEXZEN_API_PRODUCTS']}", 'ma_vt', ma_vt)
invoice
ma_vt = invoice['productCode'].to_s
c
productsZenFascom = products_result_query(dataImport, ENV['ID_APP_FASCOM'])
usersFascom = users_result_query(dataImport, ENV['ID_APP_FASCOM'])
c
if response_hash == []
          dataImport << zenfaco
        end
response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}/#{ENV['FLEXZEN_API_ORDERS']}", "so_ct", "#{zenfaco['code']}")
c
zenfaco
response_hash.count
branchZenfaco.each do |zenfaco|
        response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}/#{ENV['FLEXZEN_API_ORDERS']}", "so_ct", "#{zenfaco['code']}")
      end
branchZenfaco.each do |zenfaco|
        response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", "so_ct", "#{zenfaco['code']}")
      end
query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", "so_ct", 123)
branchZenfaco.each do |zenfaco|
        response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", "so_ct", zenfaco['code'])
      end
response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", 'so_ct', zenfaco['code'])
branchZenfaco.each do |zenfaco|
        response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", 'so_ct', zenfaco['code'])
      end
branchZenfaco.each do |zenfaco|
 branchZenfaco.each do |zenfaco|
        response_hash = query_details_flexzen("#{ENV['ID_APP_ZENFACO']}", 'so_ct', zenfaco['code'])
      end       HTTParty.get(flexzen_url("#{ENV['ID_APP_ZENFACO']}"), query: {"so_ct" => zenfaco['code']})
      end
branchZenfaco.each do |zenfaco|
        HTTParty.get(flexzen_url("#{ENV['ID_APP_ZENFACO']}"), query: {"so_ct" => zenfaco['code']})
      end
puts JSON.pretty_generate(orders_data_serializer)
JSON.pretty_generate(orders_data_serializer)
orders_data_serializer = data_serializer(branchZenfaco)
c
response_hash['data'].delete_if { |data| statusValueReject.include?(data['status']) }.count
response_hash['data'].delete_if { |data| statusValueReject.include?(data['status']) }
 statusValueReject = [2]
response_hash['data'].delete_if { |data| statusValueReject.include?(data['status']) }
response_hash['data'].count
response_hash['data'].first
response_hash['data'].first.reject! if response_hash['data'].first['status'] == 2
response_hash['data'].first
response_hash['data'].first.reject! 
response_hash['data'].first
puts JSON.pretty_generate(response_hash['data'].map {|data| data['status']})
puts JSON.pretty_generate(response_hash['data'].map {|data|  data['statusValue']})
puts JSON.pretty_generate(response_hash['data'].map {|data| data['status']})
puts JSON.pretty_generate(response_hash['data'].map {|data|  data['statusValue']})
puts JSON.pretty_generate(response_hash['data'].map {|data| data['status', data['statusValue']})
puts JSON.pretty_generate(response_hash['data'].map {|data| [data['status', data['statusValue']]})
puts JSON.pretty_generate(response_hash['data'].map {|data| [data['status', data['statusValue']})
puts JSON.pretty_generate(response_hash['data'].map {|data| [data['status', data['statusValue']]})
puts JSON.pretty_generate(response_hash['data'].map {|data| data['status']})
puts JSON.pretty_generate(response_hash['data']).map {|data| data['status']}
puts JSON.pretty_generate(response_hash['data'])
response_hash['data']
response['data']
c
h["ma_dvt"] = dvt if h["ma_dvt"] == ""
h["ma_dvt"] ||= dvt if h["ma_dvt"] == ""
h['ma_dvt']
h
quit
c
pro_hash = query_details_kiotviet("Products", ma_vt)
c
productArr << pro_hash
pro_hash = query_details_kiotviet("Products", ma_vt)
product_hash
c
product_hash
c
product_hash
c
product_hash
c
product_hash
c
cc
product_hash
c
product_hash
c
product_hash
product_hash.blank?
c
product_hash.blank?
product_hash.present?
product_hash
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
JSON.parse(response.body.to_s)
c
JSON.parse(response.body.to_s)
c
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
product_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
user_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_USERS']}"
"#{ENV['FLEXZEN_API_ENDPOINT']}" + path + "?access_token=#{ENV['ACCESS_TOKEN_FLEXZEN']}" + "&update=true"
path = "/api" + path
path = "/6184864d27b259086e55b303/customer"
path = /6184864d27b259086e55b303/customer"
user_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_USERS']}"
user_path
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
user_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_USERS']}"
      product_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
puts JSON.pretty_generate(users_hash)
JSON.pretty_generate( users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
 users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
user_path
puts JSON.pretty_generate(usersFascom)
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
productsZenFascom = products_result_query(branchFascom, ENV['ID_APP_FASCOM'])
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
product_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
user_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_USERS']}"
product_path
user_path
Synchronizers::Flexzen.api_request(:post, user_path, body: users_hash)
users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
response_hash['data'].each do |obj|
        fascom.include?(obj['branchId'])
        branchFascom << obj
      end
branchFascom = []
fascom = [24748,24742,63939,63656].freeze
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
Synchronizers::Flexzen.api_request(:post, user_path, body: users_hash)
puts JSON.pretty_generate(users_hash)
users_hash = ::Synchronizers::UserSerializer.new(usersZenfaco).as_json
send_data_users_products(usersZenfaco, productsZenfaco, user_path, product_path)
puts JSON.pretty_generate(usersZenfaco)
JSON.pretty_generate(usersZenfaco)
