quit
c
pro_hash = query_details_kiotviet("Products", ma_vt)
c
productArr << pro_hash
pro_hash = query_details_kiotviet("Products", ma_vt)
product_hash
c
product_hash
c
product_hash
c
product_hash
c
product_hash
c
cc
product_hash
c
product_hash
c
product_hash
product_hash.blank?
c
product_hash.blank?
product_hash.present?
product_hash
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
JSON.parse(response.body.to_s)
c
JSON.parse(response.body.to_s)
c
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
product_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
user_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_USERS']}"
"#{ENV['FLEXZEN_API_ENDPOINT']}" + path + "?access_token=#{ENV['ACCESS_TOKEN_FLEXZEN']}" + "&update=true"
path = "/api" + path
path = "/6184864d27b259086e55b303/customer"
path = /6184864d27b259086e55b303/customer"
user_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_USERS']}"
user_path
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
user_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_USERS']}"
      product_path = "/#{ENV['ID_APP_FLEXZEN']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
puts JSON.pretty_generate(users_hash)
JSON.pretty_generate( users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
 users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
user_path
puts JSON.pretty_generate(usersFascom)
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
productsZenFascom = products_result_query(branchFascom, ENV['ID_APP_FASCOM'])
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
send_data_users_products(usersFascom, productsZenFascom, user_path, product_path)
product_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_PRODUCTS']}"
user_path = "/#{ENV['ID_APP_FASCOM']}/#{ENV['FLEXZEN_API_USERS']}"
product_path
user_path
Synchronizers::Flexzen.api_request(:post, user_path, body: users_hash)
users_hash = ::Synchronizers::UserSerializer.new(usersFascom).as_json
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
response_hash['data'].each do |obj|
        fascom.include?(obj['branchId'])
        branchFascom << obj
      end
branchFascom = []
fascom = [24748,24742,63939,63656].freeze
usersFascom = users_result_query(branchFascom, ENV['ID_APP_FASCOM'])
Synchronizers::Flexzen.api_request(:post, user_path, body: users_hash)
puts JSON.pretty_generate(users_hash)
users_hash = ::Synchronizers::UserSerializer.new(usersZenfaco).as_json
send_data_users_products(usersZenfaco, productsZenfaco, user_path, product_path)
puts JSON.pretty_generate(usersZenfaco)
JSON.pretty_generate(usersZenfaco)
usersZenfaco
send_data_users_products(usersZenfaco, productsZenfaco, user_path, product_path)
c
customer_hash['code']
customer_hash
c
puts JSON.pretty_generate(usersZenfaco)
JSON.pretty_generate(usersZenfaco)
usersZenfaco.count
usersZenfaco.cunt
usersZenfaco
usersFascom
products_hash = ::Synchronizers::ProductSerializer.new(productsZenfaco).as_json
products_hash = ::Synchronizers::ProductSerializer.new(productsZenfaco).as_json.count
products_hash = ::Synchronizers::ProductSerializer.new(productsZenfaco).as_json
productsZenfaco
usersZenfaco
puts JSON.pretty_generate(users_hash)
users_hash = ::Synchronizers::UserSerializer.new(usersZenfaco).as_json.compact
puts JSON.pretty_generate(users_hash)
puts JSON.pretty_generate(usershash)
users_hash = ::Synchronizers::UserSerializer.new(usersZenfaco).as_json
puts JSON.pretty_generate(usersZenfaco)
JSON.pretty_generate(usersZenfaco)
usersZenfaco
usersFascom
c
JSON.parse(response.body.to_s)
c
body
fascom = ['24748','24742','63939','63656'].freeze
 zenfaco = [
        '164023','164026','58560','63321','63594','63322','63299','58618','63312','63908','63597'
      ].freeze
branchsID
c
Synchronizers::BaseSynchronizer.call(data_serializer, path)
data_serializer = data_serializer(data)
data = get_data_kiotviet
response_hash = response.body.present? ? JSON.parse(response.body.to_s) : { status: response.code }
response = HTTParty.get(get_data_kiot_path, query: product_params, headers: headers_config)
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
params[:code]
params
@oauth_client.auth_code
@oauth_client
c
cc
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(@args.first)
c
puts JSON.pretty_generate(@args.first)
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
path = "#{ENV['FLEXZEN_API_ENDPOINT']}" + "/api/#{ENV['ID_APP_FLEXZEN']}" +  "/so1/import/json" + "?access_token=#{ENV['ACCESS_TOKEN_FLEXZEN']}" + "&update=true"
path = "#{ENV['FLEXZEN_API_ENDPOINT']}" + "/api/#{ENV['ID_APP_FLEXZEN']}" +  "/so"?access_token=#{ENV['ACCESS_TOKEN_FLEXZEN']}"1/import/json"
path = "#{ENV['FLEXZEN_API_ENDPOINT']}" + "/api/#{ENV['ID_APP_FLEXZEN']}" +  "/so1/import/json"
path = "#{ENV['FLEXZEN_API_ENDPOINT']}" + "/api/#{ENV['ID_APP_FLEXZEN']}"
path = "#{ENV['FLEXZEN_API_ENDPOINT']}"
path = "/api/#{ENV['ID_APP_FLEXZEN']}" + path
path = "#{ENV['FLEXZEN_API_ENDPOINT']}"
path = "/api/#{ENV['ID_APP_FLEXZEN']}"
path = "#{ENV['FLEXZEN_API_ENDPOINT']}"
"#{ENV['FLEXZEN_API_ENDPOINT']}"
@args.last + "/import/json"
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
File.basename(Rails.root)
File.basename(Rails.root.to_s)
Rails.application.config.session_options[:key].sub(/^_/,'').sub(/_session/,'')
Rails.application
Rails.application.name
c
cc
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
c
response = HTTParty.post(path, body: body, headers: headers_config)
body
path
c
if params[:client_id] == "#{ENV['CLIENT_ID']}" && params[:client_secret] == "#{ENV['CLIENT_SECRET']}"
        flash[:notice] = "Logged in successfully."
        redirect_to root_path
      else
        flash[:notice] = "Client id or client secrect not accept."
        render 'new'
      end
c
puts JSON.pretty_generate(JSON.parse(response.body.to_s))
JSON.parse(response.body.to_s)
c
JSON.parse(response.body.to_s)
puts JSON.pretty_generate(response_hash)JSON.parse(response.body.to_s)
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
c
puts JSON.pretty_generate(response_hash)
response_hash
JSON.pretty_generate({
              "ma_vt": "FD030540",
              "sl_xuat": 1,
              "gia_ban": 475000,
              "ty_le_ck": 40,
              "tien_ck_nt": 190000,
              "dien_giai": null
            })
response_hash
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
c
puts JSON.pretty_generate( JSON.parse(response.body.to_s))
JSON.pretty_generate(customer_hash)
 JSON.parse(response.body.to_s)
c
response_hash
c
response_hash
c
 JSON.parse(response.body.to_s)
c
