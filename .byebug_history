c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
body
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
body
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
rescue HTTParty::Error
http_request
path
c
path
params
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
body
def body
        {
          "client_id" => "#{params[:session][:client_id]}",
          "client_secret" => "#{params[:session][:client_serect]}",
          # "client_id" => "#{ENV['CLIENT_ID']}",
          # "client_secret" => "#{ENV['CLIENT_SECRET']}",
          "grant_type" => "client_credentials",
          "scopes" =>  "PublicApi.Access"
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
params[:session][:client_serect]
params[:session][:client_id]
params[:session]
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          "client_id" => params[:session][:client_id],
          "client_secret" => params[:session][:client_serect],
          # "client_id" => "#{ENV['CLIENT_ID']}",
          # "client_secret" => "#{ENV['CLIENT_SECRET']}",
          "grant_type" => "client_credentials",
          "scopes" =>  "PublicApi.Access"
        }
      end
HTTParty.post(path, body: body, headers: headers_config)
c
service.result
c
HTTParty.post(path, body: body, headers: headers_config)
c
HTTParty.post(path, body: body, headers: headers_config)
headers_config
HTTParty.post(path, body: body.to_json, headers: headers_config)
def headers_config
        {
          "Content-Type": 'application/x-www-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
def headers_config
        {
          "Content-Length": "3495",
          "Content-Type": 'application/x-cwww-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
def headers_config
        {
          "Content-Length": 3495,
          "Content-Type": 'application/x-cwww-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
def headers_config
        {
          "Content-Length": 3495
          "Content-Type": 'application/x-cwww-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
 HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          client_id: "#{ENV['CLIENT_ID']}",
          client_secret: "#{ENV['CLIENT_SECRET']}",
          grant_type: "client_credentials",
          scopes: "PublicApi.Access"
        }
      end
def headers_config
        {
          "Content-Type": 'application/x-cwww-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
def headers_config
        {
          "Content-Type": 'application/x-cwww-form-urlencoded'
          "Accept-Encoding": ''
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          client_id: "#{ENV['CLIENT_ID']}",
          client_secret: "#{ENV['CLIENT_SECRET']}",
          grant_type: "client_credentials",
          scopes: "PublicApi.Access"
        }
      end
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          client_id: "#{ENV['CLIENT_ID']}",
          client_secret: "#{ENV['CLIENT_SECRET']}",
          grant_type: "client_credentials",
          scopes: "PublicApi.Access"
        }.to_json
      end
HTTParty.post(path, body: body, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          "client_id": "#{ENV['CLIENT_ID']}",
          "client_secret": "#{ENV['CLIENT_SECRET']}",
          "grant_type": "client_credentials",
          "scopes": "PublicApi.Access"
        }.to_json
      end
HTTParty.post(path, body: body, headers: headers_config)
HTTParty.post(path)
HTTParty.post(path, body: body, headers: headers_config)
def headers_config
        {
          "Content-Type": 'application/x-cwww-form-urlencoded'
          # "Accept-Encoding": ''
        }
      end
HTTParty.post(path, body: body, headers: headers_config)
c
HTTParty.post(path, body: body, headers: headers_config)
 def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          "client_id" =>  "#{ENV['CLIENT_ID']}",
          "client_secret" => "#{ENV['CLIENT_SERECT']}",
          "grant_type" => "client_credentials",
          "scopes" => "PublicApi.Access"
        }.to_json
      end
HTTParty.post(path, body: body, headers: headers_config)
c
HTTParty.post(path, body: body, headers: headers_config)
body
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          "client_id": "#{ENV['CLIENT_ID']}",
          "client_serect": "#{ENV['CLIENT_SERECT']}",
          "grant_type": "client_credentials",
          "scopes": "PublicApi.Access"
        }.to_json
      end
body
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
e
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
cc
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          "client_id": "#{ENV['CLIENT_ID']}",
          "client_serect": "#{ENV['CLIENT_SERECT']}",
          "grant_type": "client_credentials",
          "scopes": "PublicApi.Access"
        }
      end
response.body.code
response.body
response
response = HTTParty.post(path, body: body, headers: headers_config)
response HTTParty.post(path, body: body, headers: headers_config)
HTTParty.post(path, body: body, headers: headers_config)
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          client_id: "#{ENV['CLIENT_ID']}",
          client_serect: "#{ENV['CLIENT_SERECT']}",
          grant_type: "client_credentials",
          scopes: "PublicApi.Access"
        }
      end
def headers_config
        {
          "Content-Type": 'application/x-cwww-form-urlencoded',
          "Accept-Encoding": ''
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
          client_id: "#{ENV['CLIENT_ID']}",
          client_serect: "#{ENV['CLIENT_SERECT']}",
          grant_type: "client_credentials",
          scopes: "PublicApi.Access"
        }
      end
HTTParty.post(path, body: body.to_json, headers: headers_config)
c
HTTParty.post(path, body: body.to_json, headers: headers_config)
def body
        {
          # "client_id" => params[:session][:client_id],
          # "client_serect" => params[:session][:client_serect],
